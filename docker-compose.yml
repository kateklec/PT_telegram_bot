services:
  bot:
    build:
      context: ./bot
      args:
        TOKEN: ${TOKEN}
      dockerfile: Dockerfile
    image: bot_image:latest
    environment:
      - HOST_DB=${HOST_DB}
      - PORT_DB=${PORT_DB}
      - USER_DB=${USER_DB}
      - PASSWORD_DB=${PASSWORD_DB}
      - DATABASE_DB=${DATABASE_DB}
    env_file:
      - ./.env
    ports:
    - 2222:22
    container_name: bot
    networks:
      db1_network:
        ipv4_address: ${HOST_BOT}


  db:
    build:
      context: ./db
      args:
        DB_REPL_USER: ${DB_REPL_USER}
        DB_REPL_PASWWORD: ${DB_REPL_PASSWORD}
        POSTGRES_PASSWORD: ${PASSWORD_DB}     
      dockerfile: Dockerfile
    image: db_image:latest
    ports:
    - ${PORT_DB}:5432
    environment:
      POSTGRES_DB: ${DATABASE_DB}
      POSTGRES_USER: ${USER_DB}
      POSTGRES_PASSWORD: ${PASSWORD_DB}
      POSTGRES_HOST_AUTH_METHOD: "password\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c max_wal_senders=10
      -c wal_level=replica
      -c wal_log_hints=on
      -c max_connections=100
      -c log_replication_commands=on
      -c listen_addresses='*'
    container_name: db
    volumes:
      - ./db/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    networks:
      db1_network:
        ipv4_address: ${HOST_DB}
    env_file:
      - ./.env
  
  db_repl:
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    image: db_repl_image:latest
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      rm -rf /var/lib/postgresql/data/*
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=db --port=5432
      do echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chown -R postgres:postgres /var/lib/postgresql/data
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db
    container_name: db_repl
    networks:
      db1_network:
        ipv4_address: ${REPL_DB_HOST}
    env_file:
      - ./.env
    user: postgres

networks:
  db1_network:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET}