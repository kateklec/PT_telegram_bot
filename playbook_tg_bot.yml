- name: dbMaster init
  hosts: host01
  gather_facts: false
  become: yes
  tasks:

    - name: install packages
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - python3-pip
        state: latest

    - name: Create archive
      file:
        path: "{{ hostvars[inventory_hostname]['ARCHIVE'] }}"
        state: directory
        owner: "postgres"
        mode: 0750
      become: yes

    - name: Setup postgresql.conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['PG_VERSION'] }}/main/postgresql.conf"
        block: |
          archive_mode = on
          archive_command = 'cp %p {{ hostvars[inventory_hostname]['ARCHIVE'] }}%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on
          logging_collector = on
          listen_addresses = '*'

    - name: Setup pg_hba.conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['PG_VERSION'] }}/main/pg_hba.conf"
        block: |
            host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust
            host replication {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} {{ hostvars[inventory_hostname]['DB_REPL_HOST'] }}/32 md5

    - name: install psycopg2
      pip:
        name: psycopg2-binary


    - name: create db_user
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{ hostvars[inventory_hostname]['USER_DB'] }}"
        password: "{ hostvars[inventory_hostname]['PASSWORD_DB'] }}"
        role_attr_flags: LOGIN

    - name: create db
      become: yes
      become_user: postgres
      shell: |
        createdb db_bot --owner=postgres

    - name: configure psql db
      become: true
      become_user: postgres
      shell: |
        psql -c "CREATE USER {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} WITH REPLICATION ENCRYPTED PASSWORD '{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}';"
        psql -d {{ hostvars[inventory_hostname]['DATABASE_DB'] }} -c "CREATE TABLE phones (id SERIAL PRIMARY KEY, number VARCHAR(100) NOT NULL);"
        psql -d {{ hostvars[inventory_hostname]['DATABASE_DB'] }} -c "CREATE TABLE email (id SERIAL PRIMARY KEY, address VARCHAR(100) NOT NULL);"
        psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ hostvars[inventory_hostname]['DATABASE_DB'] }} TO {{ hostvars[inventory_hostname]['USER_DB'] }};"
        psql -d {{ hostvars[inventory_hostname]['DATABASE_DB'] }} -c "ALTER TABLE email OWNER TO {{ hostvars[inventory_hostname]['USER_DB'] }};"
        psql -d {{ hostvars[inventory_hostname]['DATABASE_DB'] }} -c "ALTER TABLE phones OWNER TO {{ hostvars[inventory_hostname]['USER_DB'] }};"

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted


- name: slave config and init
  hosts: host02
  gather_facts: false
  become: yes
  tasks:
    - name: install packages3
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: latest

    - name: Setup postgresql.conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['PG_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'

    - name: rm db data
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['PG_VERSION'] }}/main/

    - name: pg_basebackup
      command: pg_basebackup -R -h {{ hostvars[inventory_hostname]['HOST_DB'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -D /var/lib/postgresql/{{ hostvars[inventory_hostname]['PG_VERSION'] }}/main/ -P
      environment:
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: python bot
  hosts: host01
  gather_facts: false
  become: yes
  tasks:
    - name: install packages4
      apt:
        name:
          - python3
          - python3-pip
          - git
        state: latest

    - name: git clone
      git:
        repo: https://github.com/Mask1tt/PTStart-devops_bot.git
        dest: /tmp/bot
        version: ansible

    - name: pip install
      pip:
        name:
          - python-telegram-bot==13.7
          - paramiko
          - python-dotenv

    - name: run python bot
      shell: python3 /tmp/bot/bot.py
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        HOST: "{{ hostvars[inventory_hostname]['HOST'] }}"
        PORT: "{{ hostvars[inventory_hostname]['PORT'] }}"
        USER: "{{ hostvars[inventory_hostname]['USER'] }}"
        PASSWORD: "{{ hostvars[inventory_hostname]['PASSWORD'] }}"
        HOST_DB: "{{ hostvars[inventory_hostname]['HOST_DB'] }}"
        PORT_DB: "{{ hostvars[inventory_hostname]['PORT_DB'] }}"
        USER_DB: "{{ hostvars[inventory_hostname]['USER_DB'] }}"
        PASSWORD_DB: "{{ hostvars[inventory_hostname]['PASSWORD_DB'] }}"
        DATABASE_DB: "{{ hostvars[inventory_hostname]['DATABASE_DB'] }}"
        PG_VERSION: "{{ hostvars[inventory_hostname]['PG_VERSION'] }}"
